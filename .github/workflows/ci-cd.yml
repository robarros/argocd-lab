name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: robarros/argocd-app
  REGISTRY: docker.io

# Permiss√µes necess√°rias para o GitHub Actions
permissions:
  contents: write
  security-events: write
  actions: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd app
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test application
      run: |
        cd app
        # Testar se a aplica√ß√£o inicia sem erros
        timeout 10s python app.py || true

    - name: Generate version tags
      id: meta
      run: |
        # Gerar tags baseadas no commit
        COMMIT_SHA=$(git rev-parse --short HEAD)
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        
        # Tags que ser√£o criadas
        TAGS="${DOCKER_IMAGE}:${COMMIT_SHA}"
        TAGS="${TAGS},${DOCKER_IMAGE}:${TIMESTAMP}"
        TAGS="${TAGS},${DOCKER_IMAGE}:latest"
        
        # Se for branch main, adicionar tag stable
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          TAGS="${TAGS},${DOCKER_IMAGE}:stable"
        fi
        
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT
        echo "version=${COMMIT_SHA}" >> $GITHUB_OUTPUT
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          APP_VERSION=${{ steps.meta.outputs.version }}

    - name: Update Kubernetes deployment
      run: |
        # Backup do arquivo original
        cp k8s/hello-world-app/deployment.yaml k8s/hello-world-app/deployment.yaml.bak
        
        # Atualizar a imagem no deployment do Kubernetes (qualquer tag da imagem robarros/argocd-app)
        sed -i "s|image: robarros/argocd-app:.*|image: ${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }}|g" k8s/hello-world-app/deployment.yaml
        
        # Se n√£o encontrou a imagem robarros/argocd-app, tentar hello-world-app (fallback)
        sed -i "s|image: hello-world-app:.*|image: ${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }}|g" k8s/hello-world-app/deployment.yaml
        
        # Adicionar annotation para for√ßar rollout
        if ! grep -q "deployment.kubernetes.io/revision" k8s/hello-world-app/deployment.yaml; then
          sed -i '/template:/,/metadata:/{
            /metadata:/a\
        annotations:\
          deployment.kubernetes.io/revision: "'${{ steps.meta.outputs.timestamp }}'"
          }' k8s/hello-world-app/deployment.yaml
        else
          sed -i "s|deployment.kubernetes.io/revision: \".*\"|deployment.kubernetes.io/revision: \"${{ steps.meta.outputs.timestamp }}\"|g" k8s/hello-world-app/deployment.yaml
        fi
        
        # Mostrar as mudan√ßas feitas
        echo "=== Mudan√ßas no deployment ==="
        diff k8s/hello-world-app/deployment.yaml.bak k8s/hello-world-app/deployment.yaml || true
        rm k8s/hello-world-app/deployment.yaml.bak
        
        # Verificar se a imagem foi atualizada corretamente
        if grep -q "${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }}" k8s/hello-world-app/deployment.yaml; then
          echo "‚úÖ Imagem atualizada com sucesso para ${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }}"
        else
          echo "‚ùå Erro: Imagem n√£o foi atualizada corretamente"
          exit 1
        fi

    - name: Commit and push changes
      if: github.ref == 'refs/heads/main'
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: 'üöÄ Update deployment image to ${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }} [skip ci]'
        file_pattern: 'k8s/hello-world-app/deployment.yaml'
        commit_user_name: 'github-actions[bot]'
        commit_user_email: '41898282+github-actions[bot]@users.noreply.github.com'
        commit_author: 'github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>'
        skip_dirty_check: false
        skip_fetch: false

    - name: Create deployment summary
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Docker Image** | \`${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Commit SHA** | \`${{ steps.meta.outputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Timestamp** | \`${{ steps.meta.outputs.timestamp }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Docker Tags Created:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üéØ Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. ArgoCD will automatically detect the changes and sync the application" >> $GITHUB_STEP_SUMMARY
        echo "2. Monitor the deployment in your ArgoCD dashboard" >> $GITHUB_STEP_SUMMARY
        echo "3. Verify the application is running with the new image" >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.DOCKER_IMAGE }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'